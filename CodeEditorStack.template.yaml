AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  CreateNewVpc:
    Fn::Equals:
    - false
    - Ref: UseDefaultVpc
  UseDefaultVpc:
    Fn::Equals:
    - true
    - Ref: UseDefaultVpc
Description: AWS CloudFormation Template for SageMaker Studio Code Editor
Mappings:
  SageMakerImageArn:
    af-south-1:
      CPU: arn:aws:sagemaker:af-south-1:238384257742:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:af-south-1:238384257742:image/sagemaker-distribution-gpu
    ap-east-1:
      CPU: arn:aws:sagemaker:ap-east-1:523751269255:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:ap-east-1:523751269255:image/sagemaker-distribution-gpu
    ap-northeast-1:
      CPU: arn:aws:sagemaker:ap-northeast-1:010972774902:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:ap-northeast-1:010972774902:image/sagemaker-distribution-gpu
    ap-northeast-2:
      CPU: arn:aws:sagemaker:ap-northeast-2:064688005998:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:ap-northeast-2:064688005998:image/sagemaker-distribution-gpu
    ap-northeast-3:
      CPU: arn:aws:sagemaker:ap-northeast-3:564864627153:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:ap-northeast-3:564864627153:image/sagemaker-distribution-gpu
    ap-south-1:
      CPU: arn:aws:sagemaker:ap-south-1:245090515133:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:ap-south-1:245090515133:image/sagemaker-distribution-gpu
    ap-southeast-1:
      CPU: arn:aws:sagemaker:ap-southeast-1:022667117163:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:ap-southeast-1:022667117163:image/sagemaker-distribution-gpu
    ap-southeast-2:
      CPU: arn:aws:sagemaker:ap-southeast-2:648430277019:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:ap-southeast-2:648430277019:image/sagemaker-distribution-gpu
    ap-southeast-3:
      CPU: arn:aws:sagemaker:ap-southeast-3:370607712162:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:ap-southeast-3:370607712162:image/sagemaker-distribution-gpu
    ca-central-1:
      CPU: arn:aws:sagemaker:ca-central-1:481561238223:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:ca-central-1:481561238223:image/sagemaker-distribution-gpu
    cn-north-1:
      CPU: arn:aws:sagemaker:cn-north-1:674439102856:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:cn-north-1:674439102856:image/sagemaker-distribution-gpu
    cn-northwest-1:
      CPU: arn:aws:sagemaker:cn-northwest-1:651871951035:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:cn-northwest-1:651871951035:image/sagemaker-distribution-gpu
    eu-central-1:
      CPU: arn:aws:sagemaker:eu-central-1:545423591354:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:eu-central-1:545423591354:image/sagemaker-distribution-gpu
    eu-north-1:
      CPU: arn:aws:sagemaker:eu-north-1:175620155138:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:eu-north-1:175620155138:image/sagemaker-distribution-gpu
    eu-south-1:
      CPU: arn:aws:sagemaker:eu-south-1:810671768855:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:eu-south-1:810671768855:image/sagemaker-distribution-gpu
    eu-west-1:
      CPU: arn:aws:sagemaker:eu-west-1:819792524951:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:eu-west-1:819792524951:image/sagemaker-distribution-gpu
    eu-west-2:
      CPU: arn:aws:sagemaker:eu-west-2:021081402939:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:eu-west-2:021081402939:image/sagemaker-distribution-gpu
    eu-west-3:
      CPU: arn:aws:sagemaker:eu-west-3:856416204555:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:eu-west-3:856416204555:image/sagemaker-distribution-gpu
    il-central-1:
      CPU: arn:aws:sagemaker:il-central-1:080319125002:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:il-central-1:080319125002:image/sagemaker-distribution-gpu
    me-central-1:
      CPU: arn:aws:sagemaker:me-central-1:358593528301:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:me-central-1:358593528301:image/sagemaker-distribution-gpu
    me-south-1:
      CPU: arn:aws:sagemaker:me-south-1:523774347010:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:me-south-1:523774347010:image/sagemaker-distribution-gpu
    sa-east-1:
      CPU: arn:aws:sagemaker:sa-east-1:567556641782:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:sa-east-1:567556641782:image/sagemaker-distribution-gpu
    us-east-1:
      CPU: arn:aws:sagemaker:us-east-1:885854791233:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:us-east-1:885854791233:image/sagemaker-distribution-gpu
    us-east-2:
      CPU: arn:aws:sagemaker:us-east-2:37914896644:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:us-east-2:37914896644:image/sagemaker-distribution-gpu
    us-gov-east-1:
      CPU: arn:aws:sagemaker:us-gov-east-1:300993876623:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:us-gov-east-1:300993876623:image/sagemaker-distribution-gpu
    us-gov-west-1:
      CPU: arn:aws:sagemaker:us-gov-west-1:300992924816:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:us-gov-west-1:300992924816:image/sagemaker-distribution-gpu
    us-west-1:
      CPU: arn:aws:sagemaker:us-west-1:053634841547:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:us-west-1:053634841547:image/sagemaker-distribution-gpu
    us-west-2:
      CPU: arn:aws:sagemaker:us-west-2:542918446943:image/sagemaker-distribution-cpu
      GPU: arn:aws:sagemaker:us-west-2:542918446943:image/sagemaker-distribution-gpu
Outputs:
  SageMakerStudioUrl:
    Description: The URL of SageMaker Studio domain
    Value:
      Fn::Sub: https://${AWS::Region}.console.aws.amazon.com/sagemaker/home?region=${AWS::Region}#/studio/open/${SageMakerStudioDomain}/DefaultUser
Parameters:
  AutoStopIdleTimeInMinutes:
    Default: 60
    Description: Idle time before auto-stop of Code Editor, disabled if 0 (It's based
      on file changes, not terminal activities. This parameter cannot be updated after
      creation.)
    MinValue: 0
    Type: Number
  EbsSizeInGb:
    Default: 20
    Description: EBS volume size of Code Editor (This parameter cannot be decreased
      after creation.)
    MinValue: 5
    Type: Number
  InstanceType:
    AllowedValues:
    - ml.t3.medium
    - ml.t3.large
    - ml.t3.xlarge
    - ml.m5.large
    - ml.m5.xlarge
    - ml.m5.2xlarge
    - ml.m5.4xlarge
    - ml.m6i.large
    - ml.m6i.xlarge
    - ml.m6i.2xlarge
    - ml.m6i.4xlarge
    - ml.c5.large
    - ml.c5.xlarge
    - ml.c5.2xlarge
    - ml.c5.4xlarge
    - ml.c6i.large
    - ml.c6i.xlarge
    - ml.c6i.2xlarge
    - ml.c6i.4xlarge
    Default: ml.t3.medium
    Description: Instance type of Code Editor (Fast launch is supported on ml.t3.medium,
      ml.t3.large, ml.m5.large, ml.m5.2xlarge, and ml.c5.large.)
    Type: String
  UseDefaultVpc:
    AllowedValues:
    - true
    - false
    Default: true
    Description: Whether to use the default VPC (true) or create a new one (false)
    Type: String
Resources:
  DefaultVpcLookup:
    Condition: UseDefaultVpc
    Properties:
      ServiceToken:
        Fn::GetAtt: DefaultVpcLookupFunction.Arn
    Type: Custom::DefaultVpcLookup
  DefaultVpcLookupFunction:
    Condition: UseDefaultVpc
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import logging
          import cfnresponse

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          ec2 = boto3.client("ec2")


          def lambda_handler(event, context):
              physical_resource_id = "default-vpc-lookup"
              logger.info(f"Received event: {json.dumps(event)}")
              try:
                  if event["RequestType"] in ["Create", "Update"]:
                      # get default vpc id
                      res = ec2.describe_vpcs(Filters=[{"Name": "isDefault", "Values": ["true"]}])
                      vpc_id = res["Vpcs"][0]["VpcId"]
                      # get subnet ids
                      res = ec2.describe_subnets(Filters=[{"Name": "vpc-id", "Values": [vpc_id]}])
                      subnet_ids = ",".join([subnet["SubnetId"] for subnet in res["Subnets"]])
                      data = {"VpcId": vpc_id, "SubnetIds": subnet_ids}
                      send_success(event, context, data, physical_resource_id)
                  elif event["RequestType"] == "Delete":
                      send_success(event, context, {}, physical_resource_id)

              except Exception as e:
                  send_failure(event, context, e)


          def send_failure(event, context, e):
              logger.error(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)}, event.get("PhysicalResourceId"), reason=str(e))


          def send_success(event, context, data, physical_resource_id):
              cfnresponse.send(event, context, cfnresponse.SUCCESS, data, physical_resource_id)
      FunctionName:
        Fn::Join:
        - '-'
        - - Fn::Sub: ${AWS::StackName}-DefaultVpcLookupFunction
          - Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
      Handler: index.lambda_handler
      LoggingConfig:
        LogGroup:
          Ref: DefaultVpcLookupFunctionLogGroup
      Role:
        Fn::GetAtt: DefaultVpcLookupFunctionRole.Arn
      Runtime: python3.12
      Timeout: 600
    Type: AWS::Lambda::Function
  DefaultVpcLookupFunctionLogGroup:
    Condition: UseDefaultVpc
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Join:
        - '-'
        - - Fn::Sub: /aws/lambda/${AWS::StackName}-DefaultVpcLookupFunction
          - Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
      RetentionInDays: 7
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
  DefaultVpcLookupFunctionRole:
    Condition: UseDefaultVpc
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - ec2:DescribeVpcs
            - ec2:DescribeSubnets
            Effect: Allow
            Resource: '*'
          - Action:
            - cloudformation:DescribeStacks
            Effect: Allow
            Resource: '*'
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: DefaultVpcLookupFunction-Policy
      RoleName:
        Fn::Join:
        - '-'
        - - Fn::Sub: ${AWS::StackName}-DefaultVpcLookupFunction-Role
          - Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
    Type: AWS::IAM::Role
  SageMakerStudioCodeEditor:
    DependsOn:
    - SageMakerStudioUserProfile
    - SageMakerStudioDomainCleanup
    Properties:
      DomainId:
        Ref: SageMakerStudioDomain
      EbsSizeInGb:
        Ref: EbsSizeInGb
      InstanceType:
        Ref: InstanceType
      LifecycleConfigArn:
        Fn::GetAtt: SageMakerStudioLifecycleConfig.Arn
      SageMakerImageArn:
        Fn::FindInMap:
        - SageMakerImageArn
        - Ref: AWS::Region
        - CPU
      ServiceToken:
        Fn::GetAtt: SageMakerStudioCodeEditorFunction.Arn
      UserProfileName: DefaultUser
    Type: Custom::SageMakerStudioCodeEditor
  SageMakerStudioCodeEditorFunction:
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import logging
          import time
          import cfnresponse

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          sagemaker = boto3.client("sagemaker")

          SPACE_NAME = "default"
          APP_NAME = "default"


          def lambda_handler(event, context):
              logger.info(f"Received event: {json.dumps(event)}")
              domain_id = event["ResourceProperties"]["DomainId"]
              user_profile_name = event["ResourceProperties"]["UserProfileName"]
              instance_type = event["ResourceProperties"]["InstanceType"]
              sagemaker_image_arn = event["ResourceProperties"]["SageMakerImageArn"]
              lifecycle_config_arn = event["ResourceProperties"]["LifecycleConfigArn"]
              ebs_size = int(event["ResourceProperties"]["EbsSizeInGb"])
              request_type = event["RequestType"]
              physical_resource_id = f"{domain_id}-codeeditor"

              try:
                  # create
                  if request_type == "Create":
                      # create space
                      create_space(
                          domain_id,
                          SPACE_NAME,
                          user_profile_name,
                          ebs_size,
                          instance_type,
                          sagemaker_image_arn,
                          lifecycle_config_arn,
                      )
                      logger.info(f"Space '{SPACE_NAME}' has been created: 'EbsSizeInGb={ebs_size},InstanceType={instance_type}'")
                      # create app
                      create_app(domain_id, SPACE_NAME, APP_NAME, instance_type, sagemaker_image_arn, lifecycle_config_arn)
                      logger.info(f"App '{APP_NAME}' has been created: 'InstanceType={instance_type}'")
                      send_success(event, context, {}, physical_resource_id)

                  # update
                  elif request_type == "Update":
                      # see if space should be updated
                      space_instance_type_updated = False
                      space_ebs_size_updated = False

                      # see if ebs size has been updated
                      res = sagemaker.describe_space(DomainId=domain_id, SpaceName=SPACE_NAME)
                      current_ebs_size = int(res["SpaceSettings"]["SpaceStorageSettings"]["EbsStorageSettings"]["EbsVolumeSizeInGb"])
                      # fail if ebs size has been descreased
                      if ebs_size < current_ebs_size:
                          e = ValueError("The decrease of 'EbsVolumeSizeInGb' is not supported.")
                          raise e
                      elif ebs_size > current_ebs_size:
                          space_ebs_size_updated = True

                      # see if instance type has been updated
                      current_instance_type = res["SpaceSettings"]["CodeEditorAppSettings"]["DefaultResourceSpec"]["InstanceType"]
                      if current_instance_type != instance_type:
                          space_instance_type_updated = True

                      # see if app should be updated
                      app_updated = False
                      res = describe_app(domain_id=domain_id, space_name=SPACE_NAME, app_name=APP_NAME)
                      if not res or res["Status"] in ["Deleted", "Deleting"] or res["ResourceSpec"]["InstanceType"] != instance_type:
                          app_updated = True

                      # delete existing app (we cannot update EBS storage while app is in service)
                      if space_ebs_size_updated or app_updated:
                          delete_app(domain_id, SPACE_NAME, APP_NAME)
                          logger.info(f"App '{APP_NAME}' has been deleted.")
                          time.sleep(10)  # wait for app to be ready

                      # update space
                      if space_ebs_size_updated or space_instance_type_updated:
                          update_space(domain_id, SPACE_NAME, ebs_size, instance_type)
                          logger.info(f"Space '{SPACE_NAME}' has been updated: 'EbsSizeInGb={ebs_size},InstanceType={instance_type}'")
                          time.sleep(10)  # wait for space to be ready

                      # recreate app
                      if space_ebs_size_updated or app_updated:
                          create_app(domain_id, SPACE_NAME, APP_NAME, instance_type, sagemaker_image_arn, lifecycle_config_arn)
                          logger.info(f"App '{APP_NAME}' has been created again: 'InstanceType={instance_type}'")

                      send_success(event, context, {}, physical_resource_id)

                  # delete
                  elif request_type == "Delete":
                      # delete app
                      delete_app(domain_id, SPACE_NAME, APP_NAME)
                      logger.info(f"App '{APP_NAME}' has been deleted.")
                      # delete space
                      delete_space(domain_id, SPACE_NAME)
                      logger.info(f"Space '{SPACE_NAME}' has been deleted.")
                      send_success(event, context, {}, physical_resource_id)

              except Exception as e:
                  send_failure(event, context, e)


          def send_failure(event, context, e):
              logger.error(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)}, event.get("PhysicalResourceId"), reason=str(e))


          def send_success(event, context, data, physical_resource_id):
              cfnresponse.send(event, context, cfnresponse.SUCCESS, data, physical_resource_id)


          def wait_for_space_stability(domain_id, space_name, desired_status=None):
              while True:
                  res = sagemaker.describe_space(DomainId=domain_id, SpaceName=space_name)
                  status = res["Status"]  # 'Deleting'|'Failed'|'InService'|'Pending'|'Updating'|'Update_Failed'|'Delete_Failed'
                  if desired_status and status == desired_status:
                      break
                  if status in ["Failed", "Update_Failed", "Delete_Failed"]:
                      raise RuntimeError(f"Space is in '{status}' state.")
                  else:
                      time.sleep(10)
              return res


          def create_space(
              domain_id,
              space_name,
              user_profile_name,
              ebs_size,
              instance_type,
              sagemaker_image_arn,
              lifecycle_config_arn,
          ):
              sagemaker.create_space(
                  DomainId=domain_id,
                  SpaceName=space_name,
                  SpaceSettings={
                      "AppType": "CodeEditor",
                      "SpaceStorageSettings": {"EbsStorageSettings": {"EbsVolumeSizeInGb": ebs_size}},
                      "CodeEditorAppSettings": {
                          "DefaultResourceSpec": {
                              "SageMakerImageArn": sagemaker_image_arn,
                              "InstanceType": instance_type,
                              "LifecycleConfigArn": lifecycle_config_arn,
                          }
                      },
                  },
                  OwnershipSettings={"OwnerUserProfileName": user_profile_name},
                  SpaceSharingSettings={"SharingType": "Private"},
                  SpaceDisplayName=space_name,
              )
              return wait_for_space_stability(domain_id, space_name, "InService")


          def update_space(domain_id, space_name, ebs_size, instance_type):
              sagemaker.update_space(
                  DomainId=domain_id,
                  SpaceName=space_name,
                  SpaceSettings={
                      "SpaceStorageSettings": {"EbsStorageSettings": {"EbsVolumeSizeInGb": ebs_size}},
                      "CodeEditorAppSettings": {"DefaultResourceSpec": {"InstanceType": instance_type}},
                  },
              )
              return wait_for_space_stability(domain_id, space_name, "InService")


          def delete_space(domain_id, space_name):
              try:
                  spaces = sagemaker.list_spaces(DomainIdEquals=domain_id)["Spaces"]
                  spaces = [space for space in spaces if space["SpaceName"] == space_name]
                  for space in spaces:
                      if space["Status"] != "Deleting":
                          sagemaker.delete_space(
                              DomainId=domain_id,
                              SpaceName=space_name,
                          )
                      wait_for_space_stability(domain_id, space_name)
              except sagemaker.exceptions.ResourceNotFound as e:
                  logger.info(f"Space '{space_name}' has beed deleted. Recovering from exception: {str(e)}")
              except Exception as e:
                  raise e


          def wait_for_app_stability(domain_id, space_name, app_name, desired_status=None):
              while True:
                  res = sagemaker.describe_app(DomainId=domain_id, AppType="CodeEditor", AppName=app_name, SpaceName=space_name)
                  status = res["Status"]  # 'Deleted'|'Deleting'|'Failed'|'InService'|'Pending'
                  if desired_status and status == desired_status:
                      break
                  if status in ["Failed"]:
                      raise RuntimeError(f"Space is in '{status}' state.")
                  else:
                      time.sleep(10)
              return res


          def create_app(domain_id, space_name, app_name, instance_type, sagemaker_image_arn, lifecycle_config_arn):
              sagemaker.create_app(
                  DomainId=domain_id,
                  SpaceName=space_name,
                  AppType="CodeEditor",
                  AppName=app_name,
                  ResourceSpec={
                      "InstanceType": instance_type,
                      "SageMakerImageArn": sagemaker_image_arn,
                      "LifecycleConfigArn": lifecycle_config_arn,
                  },
              )
              return wait_for_app_stability(domain_id, space_name, app_name, "InService")


          def describe_app(domain_id, space_name, app_name):
              try:
                  return sagemaker.describe_app(
                      DomainId=domain_id,
                      AppType="CodeEditor",
                      AppName=app_name,
                      SpaceName=space_name,
                  )
              except sagemaker.exceptions.ResourceNotFound as e:
                  # allow manual deletion of code editor app as it is considered short-lived
                  logger.info(f"App '{APP_NAME}' has been deleted. Recovering from exception: {str(e)}")
                  return None
              except Exception as e:
                  raise e


          def delete_app(domain_id, space_name, app_name):
              try:
                  apps = sagemaker.list_apps(DomainIdEquals=domain_id, SpaceNameEquals=space_name)["Apps"]
                  apps = [app for app in apps if app["AppName"] == app_name]
                  for app in apps:
                      if app["Status"] not in ["Deleted", "Deleting"]:
                          sagemaker.delete_app(
                              DomainId=domain_id,
                              SpaceName=space_name,
                              AppType="CodeEditor",
                              AppName=app_name,
                          )
                      wait_for_app_stability(domain_id, space_name, app_name, "Deleted")
              except sagemaker.exceptions.ResourceNotFound as e:
                  logger.info(f"App '{app_name}' has been deleted. Recovering from exception: {str(e)}")
              except Exception as e:
                  raise e
      FunctionName:
        Fn::Join:
        - '-'
        - - Fn::Sub: ${AWS::StackName}-CodeEditorFunction
          - Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
      Handler: index.lambda_handler
      LoggingConfig:
        LogGroup:
          Ref: SageMakerStudioCodeEditorFunctionLogGroup
      Role:
        Fn::GetAtt: SageMakerStudioCodeEditorFunctionRole.Arn
      Runtime: python3.12
      Timeout: 600
    Type: AWS::Lambda::Function
  SageMakerStudioCodeEditorFunctionLogGroup:
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Join:
        - '-'
        - - Fn::Sub: /aws/lambda/${AWS::StackName}-CodeEditorFunction
          - Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
      RetentionInDays: 7
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
  SageMakerStudioCodeEditorFunctionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - sagemaker:*App*
            - sagemaker:*Space*
            Effect: Allow
            Resource: '*'
          - Action:
            - cloudformation:DescribeStacks
            Effect: Allow
            Resource: '*'
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: CodeEditorFunction-Policy
      RoleName:
        Fn::Join:
        - '-'
        - - Fn::Sub: ${AWS::StackName}-CodeEditorFunction-Role
          - Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
    Type: AWS::IAM::Role
  SageMakerStudioDomain:
    Properties:
      AppNetworkAccessType: PublicInternetOnly
      AuthMode: IAM
      DefaultUserSettings:
        DefaultLandingUri: 'studio::'
        ExecutionRole:
          Fn::GetAtt: SageMakerStudioExecutionRole.Arn
        SecurityGroups: []
        StudioWebPortal: ENABLED
      DomainName:
        Fn::Join:
        - '-'
        - - Fn::Sub: ${AWS::StackName}-Domain
          - Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
      SubnetIds:
        Fn::If:
        - UseDefaultVpc
        - Fn::Split:
          - ','
          - Fn::GetAtt: DefaultVpcLookup.SubnetIds
        - - Ref: SageMakerStudioVpcPrivateSubnetOne
          - Ref: SageMakerStudioVpcPrivateSubnetTwo
      VpcId:
        Fn::If:
        - UseDefaultVpc
        - Fn::GetAtt: DefaultVpcLookup.VpcId
        - Ref: SageMakerStudioVpc
    Type: AWS::SageMaker::Domain
  SageMakerStudioDomainCleanup:
    Properties:
      DomainId:
        Ref: SageMakerStudioDomain
      ServiceToken:
        Fn::GetAtt: SageMakerStudioDomainCleanupFunction.Arn
    Type: Custom::SageMakerStudioDomainCleanup
  SageMakerStudioDomainCleanupFunction:
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import logging
          import time
          import cfnresponse

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          sagemaker = boto3.client("sagemaker")


          def lambda_handler(event, context):
              logger.info(f"Received event: {json.dumps(event)}")
              domain_id = event["ResourceProperties"]["DomainId"]
              physical_resource_id = f"{domain_id}-cleanup"
              request_type = event["RequestType"]

              try:
                  # create / update
                  if request_type in ["Create", "Update"]:
                      send_success(event, context, {}, physical_resource_id)

                  # delete
                  elif request_type == "Delete":
                      delete_domain(domain_id)
                      logger.info(f"Domain '{domain_id}' has been deleted.")
                      time.sleep(10)  # wait for eni to be deleted
                      send_success(event, context, {}, physical_resource_id)

              except Exception as e:
                  send_failure(event, context, e)


          def send_failure(event, context, e):
              logger.error(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)}, event.get("PhysicalResourceId"), reason=str(e))


          def send_success(event, context, data, physical_resource_id):
              cfnresponse.send(event, context, cfnresponse.SUCCESS, data, physical_resource_id)


          def wait_for_domain_stability(domain_id, desired_status=None):
              while True:
                  res = sagemaker.describe_domain(DomainId=domain_id)
                  status = res["Status"]  # 'Deleting'|'Failed'|'InService'|'Pending'|'Updating'|'Update_Failed'|'Delete_Failed'
                  if desired_status and status == desired_status:
                      break
                  if status in ["Failed", "Update_Failed", "Delete_Failed"]:
                      raise RuntimeError(f"Space is in '{status}' state.")
                  else:
                      time.sleep(10)
              return res


          def delete_domain(domain_id):
              try:
                  sagemaker.delete_domain(DomainId=domain_id, RetentionPolicy={"HomeEfsFileSystem": "Delete"})
                  wait_for_domain_stability(domain_id, "Deleted")
              except sagemaker.exceptions.ResourceNotFound as e:
                  logger.info(f"Domain '{domain_id}' has been deleted. Recovering from exception: {str(e)}")
              except Exception as e:
                  raise e
      FunctionName:
        Fn::Join:
        - '-'
        - - Fn::Sub: ${AWS::StackName}-DomainCleanupFunction
          - Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
      Handler: index.lambda_handler
      LoggingConfig:
        LogGroup:
          Ref: SageMakerStudioDomainCleanupFunctionLogGroup
      Role:
        Fn::GetAtt: SageMakerStudioDomainCleanupFunctionRole.Arn
      Runtime: python3.12
      Timeout: 600
    Type: AWS::Lambda::Function
  SageMakerStudioDomainCleanupFunctionLogGroup:
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Join:
        - '-'
        - - Fn::Sub: /aws/lambda/${AWS::StackName}-DomainCleanupFunction
          - Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
      RetentionInDays: 7
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
  SageMakerStudioDomainCleanupFunctionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - sagemaker:*Domain*
            Effect: Allow
            Resource: '*'
          - Action:
            - cloudformation:DescribeStacks
            Effect: Allow
            Resource: '*'
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: DomainCleanupFunction-Policy
      RoleName:
        Fn::Join:
        - '-'
        - - Fn::Sub: ${AWS::StackName}-DomainCleanupFunction-Role
          - Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
    Type: AWS::IAM::Role
  SageMakerStudioExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - sagemaker.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AdministratorAccess
      Path: /
      RoleName:
        Fn::Join:
        - '-'
        - - Fn::Sub: ${AWS::StackName}-SageMaker-Execution-Role
          - Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
    Type: AWS::IAM::Role
  SageMakerStudioLifecycleConfig:
    Properties:
      AutoStopIdleTimeInMinutes:
        Ref: AutoStopIdleTimeInMinutes
      DomainId:
        Ref: SageMakerStudioDomain
      LifecycleConfigName:
        Fn::Join:
        - '-'
        - - Fn::Sub: ${AWS::StackName}-LifecycleConfig
          - Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
      ServiceToken:
        Fn::GetAtt: SageMakerStudioLifecycleConfigFunction.Arn
    Type: Custom::SageMakerStudioLifecycleConfig
  SageMakerStudioLifecycleConfigFunction:
    Properties:
      Code:
        ZipFile: |
          import boto3
          import base64
          import json
          import logging
          import time
          import cfnresponse

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          sagemaker = boto3.client("sagemaker")

          AUTO_STOP_COMMAND_TEMPLATE = """\
          ASI_VERSION=0.3.1

          # System variables [do not change if not needed]
          CONDA_HOME=/opt/conda/bin
          LOG_FILE=/var/log/apps/app_container.log # Writing to app_container.log delivers logs to CW logs.
          SOLUTION_DIR=/var/tmp/auto-stop-idle # Do not use /home/sagemaker-user
          PYTHON_PACKAGE=sagemaker_code_editor_auto_shut_down-$ASI_VERSION.tar.gz
          PYTHON_SCRIPT_PATH=$SOLUTION_DIR/sagemaker_code_editor_auto_shut_down/auto_stop_idle.py

          # Installing cron
          sudo apt-get update -y
          sudo apt-get install -y -q vim

          # Issue - https://github.com/aws-samples/sagemaker-studio-apps-lifecycle-config-examples/issues/12
          # SM Distribution image 1.6 is not starting cron service by default https://github.com/aws/sagemaker-distribution/issues/354

          # Check if cron needs to be installed
          status="$(dpkg-query -W --showformat='${db:Status-Status}' "cron" 2>&1)"
          if [ ! $? = 0 ] || [ ! "$status" = installed ]; then
              # Fixing invoke-rc.d: policy-rc.d denied execution of restart.
              sudo /bin/bash -c "echo '#!/bin/sh
              exit 0' > /usr/sbin/policy-rc.d"

              # Installing cron.
              echo "Installing cron..."
              sudo apt install cron
          else
              echo "Package cron is already installed."
              sudo cron
          fi

          # Creating solution directory.
          sudo mkdir -p $SOLUTION_DIR

          # Downloading autostop idle Python package.
          echo "Downloading autostop idle Python package..."
          curl -LO --output-dir /var/tmp/ https://github.com/aws-samples/sagemaker-studio-apps-lifecycle-config-examples/releases/download/v$ASI_VERSION/$PYTHON_PACKAGE
          sudo $CONDA_HOME/pip install -U -t $SOLUTION_DIR /var/tmp/$PYTHON_PACKAGE

          # Touch file to ensure idleness timer is reset to 0
          echo "Touching file to reset idleness timer"
          touch /opt/amazon/sagemaker/sagemaker-code-editor-server-data/data/User/History/startup_timestamp

          # Setting container credential URI variable to /etc/environment to make it available to cron
          sudo /bin/bash -c "echo 'AWS_CONTAINER_CREDENTIALS_RELATIVE_URI=$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI' >> /etc/environment"

          # Add script to crontab for root.
          echo "Adding autostop idle Python script to crontab..."
          echo "*/2 * * * * /bin/bash -ic '$CONDA_HOME/python $PYTHON_SCRIPT_PATH --time __AUTO_STOP_IDLE_TIME__ --region $AWS_DEFAULT_REGION >> $LOG_FILE'" | sudo crontab -
          """

          LCC_TEMPLATE = """\
          #!/bin/bash
          set -eux
          echo 'debconf debconf/frontend select Noninteractive' | sudo debconf-set-selections
          sudo apt update -qq && sudo apt upgrade -y -qq

          # setup aws completer
          echo "complete -C '/usr/local/bin/aws_completer' aws" >> /home/sagemaker-user/.bashrc

          # install tools
          sudo apt install -y -qq vim git jq curl

          # install php
          sudo apt install -y -qq software-properties-common ca-certificates lsb-release apt-transport-https
          LC_ALL=C.UTF-8 sudo add-apt-repository -y ppa:ondrej/php
          sudo apt update -qq
          sudo apt install -y -qq php8.2 php8.2-cli php8.2-common php8.2-fpm php8.2-mysql php8.2-zip php8.2-gd php8.2-mbstring php8.2-curl php8.2-xml php8.2-bcmath
          sudo apt install -y -qq sqlite3 mysql-server

          # install java
          wget -O - https://apt.corretto.aws/corretto.key | sudo gpg --dearmor -o /usr/share/keyrings/corretto-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/corretto-keyring.gpg] https://apt.corretto.aws stable main" | sudo tee /etc/apt/sources.list.d/corretto.list
          sudo apt update -qq
          sudo apt install -y -qq java-17-amazon-corretto-jdk

          # install docker
          sudo apt update -qq
          sudo apt install -y -qq ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt update -qq
          sudo apt install -y -qq docker-ce docker-ce-cli docker-buildx-plugin docker-compose-plugin

          # install golang
          GO_TMP_DIR=/tmp/go
          mkdir $GO_TMP_DIR && cd $GO_TMP_DIR
          wget https://go.dev/dl/go1.22.6.linux-amd64.tar.gz -O go.tar.gz
          sudo tar -xzvf go.tar.gz -C /usr/local
          echo "export PATH=$HOME/go/bin:/usr/local/go/bin:$PATH" >> /home/sagemaker-user/.bashrc
          cd && rm -rf $GO_TMP_DIR

          # install samcli
          SAMCLI_TMP_DIR=/tmp/samcli
          mkdir $SAMCLI_TMP_DIR && cd $SAMCLI_TMP_DIR
          wget https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip
          unzip ./aws-sam-cli-linux-x86_64.zip
          sudo ./install
          cd && rm -rf $SAMCLI_TMP_DIR
          """


          def lambda_handler(event, context):
              logger.info(f"Received event: {json.dumps(event)}")
              domain_id = event["ResourceProperties"]["DomainId"]
              lifecycle_config_name = event["ResourceProperties"]["LifecycleConfigName"].lower()
              idle_mins = int(event["ResourceProperties"]["AutoStopIdleTimeInMinutes"])
              request_type = event["RequestType"]
              physical_resource_id = f"{domain_id}_{str(idle_mins)}"

              try:
                  # create
                  if request_type == "Create":
                      res = create_lifecycle_config(lifecycle_config_name, idle_mins)
                      update_domain(domain_id)
                      logger.info(f"Studio Lifecycle Config '{lifecycle_config_name}' has been created.")
                      send_success(event, context, {"Arn": res["StudioLifecycleConfigArn"]}, physical_resource_id)

                  # update
                  elif request_type == "Update":
                      # fail if AutoStopIdleTimeInMinutes has been updated
                      if physical_resource_id != event["PhysicalResourceId"]:
                          raise ValueError(
                              "The update of 'AutoStopIdleTimeInMinutes' is not supported. Please recreate the stack instead."
                          )
                      res = sagemaker.describe_studio_lifecycle_config(StudioLifecycleConfigName=lifecycle_config_name)
                      logger.info(f"Studio Lifecycle Config '{lifecycle_config_name}' has been updated.")
                      send_success(event, context, {"Arn": res["StudioLifecycleConfigArn"]}, physical_resource_id)

                  # delete
                  elif request_type == "Delete":
                      # check existing resources
                      lcs = sagemaker.list_studio_lifecycle_configs(AppTypeEquals="CodeEditor")["StudioLifecycleConfigs"]
                      lifecycle_config_names = [lc["StudioLifecycleConfigName"] for lc in lcs]
                      # skip if lifecycle config has already been deleted
                      if lifecycle_config_name in lifecycle_config_names:
                          delete_lifecycle_config(lifecycle_config_name)
                      logger.info(f"Studio Lifecycle Config '{lifecycle_config_name}' has been deleted.")
                      send_success(event, context, {}, physical_resource_id)

              except Exception as e:
                  send_failure(event, context, e)


          def send_failure(event, context, e):
              logger.error(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)}, event.get("PhysicalResourceId"), reason=str(e))


          def send_success(event, context, data, physical_resource_id):
              cfnresponse.send(event, context, cfnresponse.SUCCESS, data, physical_resource_id)


          def create_lifecycle_config(lifecycle_config_name: str, idle_mins: int):
              lcc = LCC_TEMPLATE
              if idle_mins > 0:
                  lcc += "\n" + AUTO_STOP_COMMAND_TEMPLATE.replace("__AUTO_STOP_IDLE_TIME__", str(60 * idle_mins))
              return sagemaker.create_studio_lifecycle_config(
                  StudioLifecycleConfigName=lifecycle_config_name,
                  StudioLifecycleConfigContent=base64.b64encode(lcc.encode("utf-8")).decode("utf-8"),
                  StudioLifecycleConfigAppType="CodeEditor",
              )


          def delete_lifecycle_config(lifecycle_config_name):
              try:
                  sagemaker.delete_studio_lifecycle_config(StudioLifecycleConfigName=lifecycle_config_name)
              except sagemaker.exceptions.ResourceNotFound as e:
                  logger.info(
                      f"Studio Lifecycle Config '{lifecycle_config_name}' has beed deleted. Recovering from exception: {str(e)}"
                  )
              except Exception as e:
                  raise e


          def update_domain(domain_id):
              sagemaker.update_domain(
                  DomainId=domain_id,
                  DomainSettingsForUpdate={
                      "DockerSettings": {
                          "EnableDockerAccess": "ENABLED",
                      },
                  },
              )
              while True:
                  res = sagemaker.describe_domain(DomainId=domain_id)
                  status = res["Status"]  # 'Deleting'|'Failed'|'InService'|'Pending'|'Updating'|'Update_Failed'|'Delete_Failed'
                  if status == "InService":
                      break
                  if status in ["Failed", "Update_Failed", "Delete_Failed"]:
                      raise RuntimeError(f"Space is in '{status}' state.")
                  else:
                      time.sleep(10)
              return res
      FunctionName:
        Fn::Join:
        - '-'
        - - Fn::Sub: ${AWS::StackName}-LifecycleConfigFunction
          - Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
      Handler: index.lambda_handler
      LoggingConfig:
        LogGroup:
          Ref: SageMakerStudioLifecycleConfigFunctionLogGroup
      Role:
        Fn::GetAtt: SageMakerStudioLifecycleConfigFunctionRole.Arn
      Runtime: python3.12
      Timeout: 600
    Type: AWS::Lambda::Function
  SageMakerStudioLifecycleConfigFunctionLogGroup:
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Join:
        - '-'
        - - Fn::Sub: /aws/lambda/${AWS::StackName}-LifecycleConfigFunction
          - Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
      RetentionInDays: 7
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
  SageMakerStudioLifecycleConfigFunctionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - sagemaker:*StudioLifecycleConfig*
            - sagemaker:*Domain*
            Effect: Allow
            Resource: '*'
          - Action:
            - cloudformation:DescribeStacks
            Effect: Allow
            Resource: '*'
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: LifecycleConfigFunction-Policy
      RoleName:
        Fn::Join:
        - '-'
        - - Fn::Sub: ${AWS::StackName}-LifecycleConfigFunction-Role
          - Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
    Type: AWS::IAM::Role
  SageMakerStudioUserProfile:
    DependsOn: SageMakerStudioDomainCleanup
    Properties:
      DomainId:
        Ref: SageMakerStudioDomain
      UserProfileName: DefaultUser
      UserSettings:
        CodeEditorAppSettings:
          LifecycleConfigArns:
          - Fn::GetAtt: SageMakerStudioLifecycleConfig.Arn
    Type: AWS::SageMaker::UserProfile
  SageMakerStudioVpc:
    Condition: CreateNewVpc
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-vpc
    Type: AWS::EC2::VPC
  SageMakerStudioVpcGatewayAttachment:
    Condition: CreateNewVpc
    Properties:
      InternetGatewayId:
        Ref: SageMakerStudioVpcInternetGateway
      VpcId:
        Ref: SageMakerStudioVpc
    Type: AWS::EC2::VPCGatewayAttachment
  SageMakerStudioVpcInternetGateway:
    Condition: CreateNewVpc
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-igw
    Type: AWS::EC2::InternetGateway
  SageMakerStudioVpcPrivateOneRouteTableAssociationOne:
    Condition: CreateNewVpc
    Properties:
      RouteTableId:
        Ref: SageMakerStudioVpcPrivateRouteTableOne
      SubnetId:
        Ref: SageMakerStudioVpcPrivateSubnetOne
    Type: AWS::EC2::SubnetRouteTableAssociation
  SageMakerStudioVpcPrivateOneRouteTableAssociationTwo:
    Condition: CreateNewVpc
    Properties:
      RouteTableId:
        Ref: SageMakerStudioVpcPrivateRouteTableTwo
      SubnetId:
        Ref: SageMakerStudioVpcPrivateSubnetTwo
    Type: AWS::EC2::SubnetRouteTableAssociation
  SageMakerStudioVpcPrivateRouteTableOne:
    Condition: CreateNewVpc
    Properties:
      VpcId:
        Ref: SageMakerStudioVpc
    Type: AWS::EC2::RouteTable
  SageMakerStudioVpcPrivateRouteTableTwo:
    Condition: CreateNewVpc
    Properties:
      VpcId:
        Ref: SageMakerStudioVpc
    Type: AWS::EC2::RouteTable
  SageMakerStudioVpcPrivateSubnetOne:
    Condition: CreateNewVpc
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock: 10.0.10.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-private1
      VpcId:
        Ref: SageMakerStudioVpc
    Type: AWS::EC2::Subnet
  SageMakerStudioVpcPrivateSubnetTwo:
    Condition: CreateNewVpc
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      CidrBlock: 10.0.11.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-private2
      VpcId:
        Ref: SageMakerStudioVpc
    Type: AWS::EC2::Subnet
  SageMakerStudioVpcPublicOneRouteTableAssociationOne:
    Condition: CreateNewVpc
    Properties:
      RouteTableId:
        Ref: SageMakerStudioVpcPublicRouteTableOne
      SubnetId:
        Ref: SageMakerStudioVpcPublicSubnetOne
    Type: AWS::EC2::SubnetRouteTableAssociation
  SageMakerStudioVpcPublicOneRouteTableAssociationTwo:
    Condition: CreateNewVpc
    Properties:
      RouteTableId:
        Ref: SageMakerStudioVpcPublicRouteTableTwo
      SubnetId:
        Ref: SageMakerStudioVpcPublicSubnetTwo
    Type: AWS::EC2::SubnetRouteTableAssociation
  SageMakerStudioVpcPublicRouteOne:
    Condition: CreateNewVpc
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: SageMakerStudioVpcInternetGateway
      RouteTableId:
        Ref: SageMakerStudioVpcPublicRouteTableOne
    Type: AWS::EC2::Route
  SageMakerStudioVpcPublicRouteTableOne:
    Condition: CreateNewVpc
    Properties:
      VpcId:
        Ref: SageMakerStudioVpc
    Type: AWS::EC2::RouteTable
  SageMakerStudioVpcPublicRouteTableTwo:
    Condition: CreateNewVpc
    Properties:
      VpcId:
        Ref: SageMakerStudioVpc
    Type: AWS::EC2::RouteTable
  SageMakerStudioVpcPublicRouteTwo:
    Condition: CreateNewVpc
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: SageMakerStudioVpcInternetGateway
      RouteTableId:
        Ref: SageMakerStudioVpcPublicRouteTableTwo
    Type: AWS::EC2::Route
  SageMakerStudioVpcPublicSubnetOne:
    Condition: CreateNewVpc
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-public1
      VpcId:
        Ref: SageMakerStudioVpc
    Type: AWS::EC2::Subnet
  SageMakerStudioVpcPublicSubnetTwo:
    Condition: CreateNewVpc
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-public2
      VpcId:
        Ref: SageMakerStudioVpc
    Type: AWS::EC2::Subnet
